{"version":3,"sources":["utils/dice.js","components/DicePoolForm/DicePoolForm.js","components/ResultCard/ResultCard.js","Ignota.js","serviceWorker.js","index.js"],"names":["dicePoolReg","Die","sides","this","roll","result","Math","floor","random","DicePool","command","parseCommand","rollPool","exec","numberOfDice","Number","sidesOnDice","modifier","sum","dice","i","addDie","die","push","DicePoolForm","props","handleChange","event","setState","dicePool","target","value","handleSubmit","preventDefault","state","test","error","addResultCard","id","onSubmit","type","name","aria-label","onChange","className","React","Component","ResultCard","map","join","Ignota","results","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8be0bc5.chunk.js","sourcesContent":["const dicePoolReg = /^([1-9][0-9]*)(d)([1-9][0-9]*)([+-]\\d+)?$/i;\n\nexport class Die {\n  constructor(sides) {\n    this.sides = sides;\n    this.roll();\n  }\n\n  roll() {\n    this.result = Math.floor(Math.random() * this.sides) + 1;\n  }\n}\n\nexport class DicePool {\n  constructor(command) {\n    this.command = command;\n    this.parseCommand();\n    this.rollPool();\n  }\n\n  parseCommand() {\n    let result = dicePoolReg.exec(this.command);\n\n    this.numberOfDice = Number(result[1]);\n    this.sidesOnDice = Number(result[3]);\n    this.modifier = Number(result[4]) || 0;\n  }\n\n  rollPool() {\n    this.sum = this.modifier;\n    this.dice = [];\n\n    for (let i=0; i<this.numberOfDice; i++) {\n      this.addDie();\n    }\n  }\n\n  addDie() {\n    let die = new Die(this.sidesOnDice);\n    this.sum += die.result;\n    this.dice.push(die);\n  }\n}\n\nexport function validateDicePoolInput(command) {\n  return dicePoolReg.test(command);\n}\n","import React from 'react';\nimport { DicePool, validateDicePoolInput } from '../../utils/dice';\n\nimport './DicePoolForm.css';\n\nexport class DicePoolForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { dicePool: '', error: false };\n  }\n\n  handleChange = (event) => {\n    this.setState({ dicePool: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (validateDicePoolInput(this.state.dicePool)) {\n      this.setState({ dicePool: '', error: false });\n      this.addResultCard(new DicePool(this.state.dicePool));\n    } else {\n      this.setState({ error: true });\n    }\n  }\n\n  addResultCard = (result) => {\n    this.props.addResultCard(result);\n  }\n\n  render() {\n    return (\n      <form id=\"dice-pool-form\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          id=\"dice-pool\"\n          name=\"roll\"\n          aria-label=\"Roll\"\n          value={this.state.dicePool}\n          onChange={this.handleChange}\n        />\n        {this.state.error &&\n          <div className=\"dice-pool-error\">\n            <div className=\"dice-pool-error-content\">\n              <p>Enter a valid dice pool</p>\n              <p>For example, 1d20+3</p>\n            </div>\n          </div>\n        }\n      </form>\n    );\n  };\n}\n","import React from 'react';\n\nimport './ResultCard.css';\n\nexport function ResultCard(props) {\n  return (\n    <div className=\"result-card\">\n      <div className=\"result-card-content\">\n        <h3 className=\"result-card-title\">{props.result}</h3>\n        <div className=\"result-card-detail\">\n          <p className=\"result-card-dice\">dice: {props.dice.map(die => (\n            `${die.result}`\n          )).join(', ')}</p>\n          <p className=\"result-card-command\">command: {props.command}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { DicePoolForm } from './components/DicePoolForm/DicePoolForm';\nimport { ResultCard } from './components/ResultCard/ResultCard'\n\nimport './Ignota.css';\n\nclass Ignota extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { results: [] }\n  }\n\n  addResultCard = (result) => {\n    const results = [result, ...this.state.results];\n    this.setState({ results: results });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"page-title\">IGNOTA</h1>\n        <DicePoolForm addResultCard={this.addResultCard}/>\n        {this.state.results.map((result, index) => (\n          <ResultCard\n            command={result.command}\n            dice={result.dice}\n            key={index}\n            result={result.sum}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Ignota;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Ignota from './Ignota';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Ignota />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}